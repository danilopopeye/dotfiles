set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" Vundle bundles
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'Lokaltog/vim-powerline'
Bundle 'docunext/closetag.vim'
Bundle 'aelesbao/vim-session'
Bundle 'tsaleh/vim-matchit'
Bundle 'kien/ctrlp.vim'
Bundle 'mileszs/ack.vim'
Bundle 'thoughtbot/vim-rspec'

" Bundle 'terryma/vim-multiple-cursors'
Bundle 'Shougo/neocomplcache'
" Bundle 'Shougo/neosnippet'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-dispatch'
Bundle 'airblade/vim-gitgutter'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'godlygeek/tabular'

" Bundle 'jelera/vim-javascript-syntax'
" Bundle 'kchmck/vim-coffee-script'
" Bundle 'digitaltoad/vim-jade'
" Bundle 'groenewege/vim-less'
" Bundle 'nono/vim-handlebars'
" Bundle 'chrisbra/csv.vim'

Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-rbenv'

filetype plugin indent on
filetype plugin on

syntax on

" options
set showmode
set showmatch
set hidden
set number
set smartindent
set autoindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set ignorecase
set smartcase
set hlsearch
set incsearch
set visualbell
set noerrorbells
set nobackup
set noswapfile
set listchars=tab:â–¸\ ,trail:Â·,extends:#,nbsp:Â·
set nolist
set backspace=indent,eol,start
set scrolloff=3
set title
set cursorline
set foldenable
set foldmethod=syntax
set nofoldenable
set wildignore+=.DS_Store,node_modules,*/tmp/*,*.so,*.swp
set wildmenu
set wildmode=list:longest
set shell=/usr/local/bin/zsh

" dont continue comments when pushing o/O
set formatoptions-=o

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" mark unnecessary whitespace
autocmd BufRead * highlight BadWhitespace ctermbg=red guibg=red
autocmd BufRead * match BadWhitespace /^\t\+/
autocmd BufRead * match BadWhitespace /\s\+$/

" html js css complete ruby xml
autocmd FileType html,markdown setl omnifunc=htmlcomplete#CompleteTags
autocmd FileType css setl omnifunc=csscomplete#CompleteCSS
autocmd FileType ruby setl omnifunc=rubycomplete#Complete
autocmd FileType php setl omnifunc=phpcomplete#CompletePHP
autocmd FileType xml setl omnifunc=xmlcomplete#CompleteTags
autocmd FileType coffee setl foldmethod=indent|setl foldlevel=1

" javascript
autocmd FileType javascript setl omnifunc=javascriptcomplete#CompleteJS
" au FileType javascript call JavaScriptFold()

" foldmethod as indent 'cause syntax is slow
autocmd FileType html,css,eruby,ruby,yaml setl foldmethod=indent

" Open new windows on the bottom and right instead of the top and left.
set splitbelow
set splitright

" call sudo with w!!
cmap w!! w !sudo tee % >/dev/null

" map leader
let mapleader = ","

" save on lost focus
au FocusLost * :wa

" make ; act like a :
" nnoremap ; :

" don't mess with wrap movement
nnoremap j gj
nnoremap k gk

" clear search highlighting
nnoremap <silent> <leader>/ :nohlsearch<CR>

" pastetoggle has timeout issue with powerline
map <F2> :set paste!<CR>

" dont use arrow keys :)
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" don't fuck with arrow keys
set t_ku=OA
set t_kd=OB
set t_kr=OC
set t_kl=OD

" tab navigation
nnoremap <Tab> :tabnext<CR>
nnoremap <S-Tab> :tabprevious<CR>

" window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" clear fugitive buffers on close
autocmd BufReadPost fugitive://* set bufhidden=delete

" fugitive maps
nmap <silent> <Leader>gs  :Gstatus<CR>
nmap <silent> <Leader>gb  :Gblame<CR>
nmap <silent> <Leader>gl  :Glog -15<CR>
nmap <silent> <Leader>gc  :Gcommit<CR>
nmap <silent> <Leader>ga  :Gcommit --amend<CR>
nmap <silent> <Leader>gm  :Gmove
nmap <silent> <Leader>ge  :Gedit
nmap <silent> <Leader>gr  :Gread<CR>
nmap <silent> <Leader>grm :Gremove<CR>
nmap <silent> <Leader>gd  :Gdiff<CR>
nmap <silent> <Leader>gdv :Gvdiff<CR>
nmap <silent> <Leader>gds :Gsdiff<CR>
nmap <Leader>gg :Ggrep

" vim-gitgutter
let g:gitgutter_eager=0

" powerline
set laststatus=2
let g:Powerline_symbols = 'fancy'

" ctrlp
nmap <silent> <leader>b :CtrlPBuffer<CR>
nmap <silent> <leader>m :CtrlPMRU<CR>
let g:ctrlp_working_path_mode = ''
let g:ctrlp_clear_cache_on_exit=0
let g:ctrlp_max_height = 15

" syntastic
let g:syntastic_coffee_lint_options='max_line_length=0'

" NERDTree
nmap <silent> <Leader>n :NERDTreeToggle<CR>

" session
let g:session_autoload = 'yes'
let g:session_autosave = 'yes'

" neocomplcache
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-l> neocomplcache#complete_common_string()
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

" indent-guides
let g:indent_guides_guide_size = 2

" color and theme
set t_Co=256
set background=dark
colorscheme tomorrow-night
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0

autocmd FileType cucumber compiler cucumber | setl makeprg=cucumber\ -c\ \"%:p\"
autocmd FileType ruby
      \ if expand('%') =~# '_test\.rb$' |
      \   compiler rubyunit | setl makeprg=testrb\ \"%:p\" |
      \ elseif expand('%') =~# '_spec\.rb$' |
      \   compiler rspec | setl makeprg=rspec\ -c\ \"%:p\" |
      \ else |
      \   compiler ruby | setl makeprg=ruby\ -wc\ \"%:p\" |
      \ endif
autocmd User Bundler if &makeprg !~# 'bundle' | setl makeprg^=bundle\ exec\  | endif

" Rspec.vim mappings
let g:rspec_command = "Dispatch zeus rspec {spec}"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Tabular
if exists(":Tabularize")
  nmap <Leader>= :Tabularize /=<CR>
  vmap <Leader>= :Tabularize /=<CR>
  nmap <Leader>| :Tabularize /|<CR>
  vmap <Leader>| :Tabularize /|<CR>
  nmap <Leader>: :Tabularize /:\zs<CR>
  vmap <Leader>: :Tabularize /:\zs<CR>
endif
