set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle required!
Bundle 'gmarik/vundle'

" Vundle bundles
Bundle 'vim-airline/vim-airline'
Bundle 'vim-airline/vim-airline-themes'
Bundle 'docunext/closetag.vim'
Bundle 'matchit.zip'
Bundle 'kien/ctrlp.vim'
Bundle 'mileszs/ack.vim'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-vinegar'
" Bundle 'airblade/vim-gitgutter'
" Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'ntpeters/vim-better-whitespace'
" Bundle 'godlygeek/tabular'
" Bundle 'sjl/gundo.vim'

" tmux things
Bundle 'edkolev/promptline.vim'
Bundle 'edkolev/tmuxline.vim'

" Dash.app
" Bundle 'rizzatti/funcoo.vim'
" Bundle 'rizzatti/dash.vim'

" Bundle 'kchmck/vim-coffee-script'
" Bundle 'digitaltoad/vim-jade'
" Bundle 'groenewege/vim-less'
" Bundle 'nono/vim-handlebars'
" Bundle 'chrisbra/csv.vim'

" languages and stuff
Bundle 'jelera/vim-javascript-syntax'
Bundle 'pangloss/vim-javascript'
" Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'Keithbsmiley/rspec.vim'
Bundle 'thoughtbot/vim-rspec'
Bundle 'ngmy/vim-rubocop'
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-fugitive'
" Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-haml'
" Bundle 'tpope/vim-rbenv'
Bundle 'tpope/vim-obsession'
Bundle 'dhruvasagar/vim-prosession'

" new kids on the block
" Bundle 'buztard/vim-nomad'
" Bundle 't9md/vim-choosewin'
Bundle 'tpope/vim-speeddating'
" Bundle 'kshenoy/vim-signature'
" Bundle 'kien/rainbow_parentheses.vim'
" Bundle 'ZoomWin'

" the ones to try
" Bundle 'ck3g/vim-change-hash-syntax'
" Bundle 'othree/javascript-libraries-syntax.vim'
Bundle 'myusuf3/numbers.vim'
Bundle 'plasticboy/vim-markdown'
Bundle 'pearofducks/ansible-vim'

filetype plugin indent on
filetype plugin on

syntax on

" options
set noesckeys " disable arrow keys
set showmode
set showmatch
set matchtime=0
set hidden
set number
set relativenumber
set laststatus=2
set smartindent
set autoindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set textwidth=99
set expandtab
set ignorecase
set smartcase
set hlsearch
set incsearch
set visualbell
set noerrorbells
set nobackup
set noswapfile
set listchars=tab:‚ñ∏\ ,eol:¬¨,trail:‚ãÖ,extends:‚ùØ,precedes:‚ùÆ
set nolist
set showbreak=‚Ü™
set backspace=indent,eol,start
set scrolloff=3
set title
set cursorline
set foldenable
set foldmethod=syntax
set nofoldenable
set wildignore+=.DS_Store,node_modules,*/tmp/*,*.so,*.swp,coverage,tests/roles/*
set wildmenu
set wildmode=list:longest
set shell=/bin/zsh

" dont continue comments when pushing o/O
set formatoptions-=o

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" color and theme
set t_Co=256
set background=dark
colorscheme Tomorrow-Night

" html js css complete ruby xml
autocmd FileType html,markdown setl omnifunc=htmlcomplete#CompleteTags
autocmd FileType css setl omnifunc=csscomplete#CompleteCSS
autocmd FileType ruby setl omnifunc=rubycomplete#Complete
autocmd FileType xml setl omnifunc=xmlcomplete#CompleteTags

" javascript
autocmd FileType javascript setl omnifunc=javascriptcomplete#CompleteJS
au FileType javascript call JavaScriptFold()

" foldmethod as indent 'cause syntax is slow
" autocmd FileType html,scss,css,eruby,ruby,yaml setl foldmethod=indent

" Open new windows on the bottom and right instead of the top and left.
set splitbelow
set splitright

" call sudo with w!!
cmap w!! w !sudo tee % >/dev/null

" map leader
let mapleader = ","

" save on lost focus
au FocusLost * :wa

" yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" don't mess with wrap movement
nnoremap j gj
nnoremap k gk

" use Esc to hide search highlights
nnoremap <silent> <Esc> :nohlsearch<CR>

" dont use arrow keys :)
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>


" don't fuck with arrow keys
set t_ku=OA
set t_kd=OB
set t_kr=OC
set t_kl=OD

" tab navigation
set t_kB=[Z
nnoremap <Tab> :tabnext<CR>
nnoremap <S-Tab> :tabprevious<CR>

" window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz

" rainbow parentheses
" au VimEnter * RainbowParenthesesToggle
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces

" clear fugitive buffers on close
autocmd BufReadPost fugitive://* set bufhidden=delete

" ProSession
let g:prosession_per_branch = 1

" Gundo
nnoremap <Leader>u :GundoToggle<CR>
let g:gundo_preview_bottom = 1
let g:gundo_help = 0

" Dash.app
nmap <silent> <leader>d <Plug>DashSearch

" fugitive maps
nmap <silent> <Leader>gs  :Gstatus<CR>
nmap <silent> <Leader>gb  :Gblame<CR>
nmap <silent> <Leader>gl  :Glog -15<CR>
nmap <silent> <Leader>gc  :Gcommit<CR>
nmap <silent> <Leader>ga  :Gcommit --amend<CR>
nmap <silent> <Leader>gm  :Gmove
nmap <silent> <Leader>ge  :Gedit
nmap <silent> <Leader>gr  :Gread<CR>
nmap <silent> <Leader>grm :Gremove<CR>
nmap <silent> <Leader>gd  :Gdiff<CR>
nmap <silent> <Leader>gdv :Gvdiff<CR>
nmap <silent> <Leader>gds :Gsdiff<CR>
nmap <Leader>gg :Ggrep

" Use powerline fonts on airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
" include Obsession status
let g:airline_section_z = airline#section#create(['%{ObsessionStatus(''$'', '''')}', 'windowswap', '%3p%% ', 'linenr', ':%3v '])

" ctrlp
nmap <silent> <leader>b :CtrlPBuffer<CR>
nmap <silent> <leader>m :CtrlPMRU<CR>
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_max_height = 15
let g:ctrlp_user_command = 'ack %s --nocolor -f --ignore-dir=tests/roles'

" neocomplete
" let g:acp_enableAtStartup = 0
" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_smart_case = 1
" let g:neocomplete#sources#syntax#min_keyword_length = 2
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" neocomplete key-mappings
" inoremap <expr><C-g> neocomplete#undo_completion()
" inoremap <expr><C-l> neocomplete#complete_common_string()
" inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS>  neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><C-y> neocomplete#close_popup()
" inoremap <expr><C-e> neocomplete#cancel_popup()

" indent-guides
" let g:indent_guides_guide_size = 2

" gitgutter
" let g:gitgutter_realtime = 0
" let g:gitgutter_eager = 0

highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0

autocmd FileType cucumber compiler cucumber | setl makeprg=cucumber\ -c\ \"%:p\"
autocmd FileType ruby
      \ if expand('%') =~# '_test\.rb$' |
      \   compiler rubyunit | setl makeprg=testrb\ \"%:p\" |
      \ elseif expand('%') =~# '_spec\.rb$' |
      \   compiler rspec | setl makeprg=rspec\ -c\ \"%:p\" |
      \ else |
      \   compiler ruby | setl makeprg=ruby\ -wc\ \"%:p\" |
      \ endif
autocmd User Bundler if &makeprg !~# 'bundle' | setl makeprg^=bundle\ exec\  | endif

" Rspec.vim mappings
let g:rspec_command = "Dispatch bundle exec rspec -f d {spec}"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Tabular
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a\ :Tabularize /\|<CR>
vmap <Leader>a\ :Tabularize /\|<CR>
nmap <Leader>a; :Tabularize /:<CR>
vmap <Leader>a; :Tabularize /:<CR>

" tmuxline
let g:tmuxline_powerline_separators = 1
let g:tmuxline_theme = 'airline'
let g:tmuxline_preset = {
  \'a'       : '#S',
  \'win'     : ['#I', '#W'],
  \'cwin'    : ['#I', '#W'],
  \"x"       : '#(tmux show-window-options | grep "synchronize-panes on">/dev/null && echo "Sync")',
  \'y'       : ['%A', '%R'],
  \'z'       : '#H',
  \'options' : {'status-justify' : 'left'}
\}

" promptline
let g:promptline_powerline_symbols = 1
let g:promptline_theme = 'airline'
let g:promptline_preset = {
  \'a'    : [ promptline#slices#cwd({ 'dir_limit': 1 }) ],
  \'b'    : [ promptline#slices#git_status(), promptline#slices#vcs_branch() ],
  \'c'    : [ promptline#slices#jobs(), promptline#slices#last_exit_code() ]
\}
